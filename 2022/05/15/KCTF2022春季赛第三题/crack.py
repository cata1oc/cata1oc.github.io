import itertools
import random

v10 = [0x2F65B1FF, 0x31ED86D0, 0x9A285C0F, 0x4048059D,
	   0x7C0EEFF6, 0x4DE36926, 0xD7CB3529, 0x978330B4,
	   0x920A627E, 0xDFE90B58, 0x08223E71, 0x9FA10EC5,
	   0xA4A1C4A5, 0x7B48CFFD, 0x736AF18C, 0xECCBFF49,
	   0xB3B7FF6B, 0xC8FF3096, 0xBB95C11A, 0x575E3E53,
	   0xFB051230, 0x33FA22A6, 0x886FE3BC, 0xDF31DDEF,
	   0x1CC4CDAE, 0x2F3EEF08, 0xA7510CB4, 0x7860D15B,
	   0x8CFAF412, 0xA3C41B1A, 0x049517AE, 0x7CF5C6F5,
	   0xEA4E1202, 0x498A0918, 0x4D1F1EB6, 0x31EAD843,
	   0x762F08C5, 0x3FA501DD, 0x72BA1F6B, 0x4350C728,
	   0x13E93CDF, 0x2C4C3D02, 0x5EF62269, 0x1DA6E541]

	
byte_40B000 = [
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0x0A, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0xA3, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
  

def sub_402070(s):
	
	v8 = []
	for i in range(16):
		v8.append(0)
	v8 = sub_401145(v8, s)
	#for i in range(4):
	#	print(hex(v8[4 * i]), hex(v8[4 * i + 1]), hex(v8[4 * i + 2]), hex(v8[4 * i + 3]))
	#print()

	v8 = sub_401186(v8,  v10[0:4])

	for j in range(9):
		
		# Get Value From Byte_40B000
		v8 = sub_401172(v8)

		# ROR
		v8 = sub_40122B(v8)

		v8 = sub_40100F(v8)

		# Xor Local
		v8 = sub_401186(v8, v10[4+j*4:8+j*4])
	
	v8 = sub_401172(v8)
	
	v8 = sub_40122B(v8)
	
	len_v10 = len(v10)
	v8 = sub_401186(v8, v10[len_v10-4:len_v10])
	for i in range(4):
		print(hex(v8[4 * i]), hex(v8[4 * i + 1]), hex(v8[4 * i + 2]), hex(v8[4 * i + 3]))
	print()

	v8 = sub_40125D(v8)

	
	return v8

def sub_40125D(buf):
	
	res = []
	for i in range(16):
		res.append(0)
	for i in range(4):
		for j in range(4):
			res[i * 4 + j] = buf[4 * j + i]
	return res
		

def sub_401145(buf, orig):
	
	k = 0
	#print('orig', 'now', 'value')
	for i in range(4):
		for j in range(4):
			buf[4 * j + i] = ord(orig[4 * i + j])
			k = k + 1
			
			#print(4 * i + j, 4 * j + i, hex(ord(orig[4 * i + j])))
	
	return buf
		
			
def sub_401186(buf, local):
	
	v5 = []
	res = []

	#print()
	#print('s', 'orig', 'now')
	for i in range(16):
		v5.append(0)
	for i in range(16):
		res.append(0)
	for i in range(4):
		for j in range(4):
			v5 = (local[j] >> (8 * (3 - i))) & 0xFF
			res[4 * i + j] = (buf[4 * i + j]) ^ v5
			#print(4 * i + j, hex(local[j]), hex(local[j] >> (8 * (3 - i))), hex(v5), hex(res[4 * i + j]))
	return res

	
def sub_401172(buf):
	
	res = []
	#print()
	#print('s', 'orig', 'now')
	for i in range(16):
		res.append(0)
	for i in range(4):
		for j in range(4):
			res[4 * i + j] = byte_40B000[buf[4 * i + j]]
			#print(4 * i + j, hex(buf[4 * i + j]), hex(res[4 * i + j]))
	return res
	

# ROR
def sub_40122B(buf):
	
	res = []
	for i in range(16):
		res.append(0)
	for i in range(4):
		res[4*i:5*i] = buf[4*i+4-i:4*i+4]
		res[5*i:4*i+4] = buf[4*i:4*i+4-i]
	#print()
	#print('after ror:')
	#for i in range(4):
	#	print(hex(res[4 * i]), hex(res[4 * i + 1]), hex(res[4 * i + 2]), hex(res[4 * i + 3]))
	return res


def sub_40100F(buf):
	
	v9 = []
	res = []
	for i in range(16):
		res.append(0)
	for i in range(44):
		v9.append(0xCC)
	v9[0] = 2;
	v9[1] = 3;
	v9[2] = 1;
	v9[3] = 1;
	v9[4] = 1;
	v9[5] = 2;
	v9[6] = 3;
	v9[7] = 1;
	v9[8] = 1;
	v9[9] = 1;
	v9[10] = 2;
	v9[11] = 3;
	v9[12] = 3;
	v9[13] = 1;
	v9[14] = 1;
	v9[15] = 2;
	
	for i in range(4):
		for j in range(4):
			v9[4 * i + 24 + j] = buf[4 * i + j]
	#for x in v9:
	#	print(hex(x))
	#print()
	
	for k in range(4):
		for m in range(4):
			tmp = sub_401118(v9[4 * k], v9[m + 24])
			v1 = tmp
			tmp = sub_401118(v9[4 * k + 1], v9[m + 28])
			v2 = tmp ^ v1
			tmp = sub_401118(v9[4 * k + 2], v9[m + 32])
			v3 = tmp ^ v2
			tmp = sub_401118(v9[4 * k + 3], v9[m + 36])
			v4 = tmp ^ v3
			res[4 * k + m] = v4
	return res


def sub_401118(a1, a2):
	v5 = 0
	for i in range(8):
		if a1 & 1 != 0:
			v5 = (a2 ^ v5) & 0xFF
		v3 = a2 & 0x80
		a2 = (a2 * 2) & 0xFF
		if v3 != 0:
			a2 = (a2 ^ 0x1B) & 0xFF
		a1 = (a1 >> 1) & 0xFF
	return v5
	
	

	
if __name__ == '__main__':
	

	s1 = '0123456789abcdefghijklmnopqrstuv'
	s2 = 'xyzdefghijklmnopqrstuv0123456789' 
	sub_402070(s2[0:16])
	#sub_402070(s2[16:32])

