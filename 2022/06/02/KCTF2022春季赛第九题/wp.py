import os

s1 = 'A1234567123456781234567812345678'
s2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456'
sg = 'AC2HX431BG21BE01HUASDZAEP1R3YKFC'

byte_7EC3E8 = [
0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7,
0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3,
0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF, 0x98, 0x7A,
0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62, 0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95,
0x80, 0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6, 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA,
0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B,
0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35, 0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2,
0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87, 0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52,
0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF, 0x8A, 0xD2, 0x40, 0xC7, 0x38, 0xB5,
0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1, 0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55,
0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60,
0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F,
0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51, 0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F,
0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8, 0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD,
0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A, 0x0C, 0x96, 0x77, 0x7E,
0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84, 0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20,
0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48
]

box = [
0x93F611A7,
0xEC090F51,
0xFBFD0886,
0xD123490A,
0xDD33EA6E,
0xE3CDC40D,
0x4B525D0B,
0x39B715DE,
0xBBB268BD,
0x51DE36B0,
0xF26E8995,
0x5206F33E,
0x1AF9D875,
0x55527F61,
0x4441E867,
0x6A5D3667,
0x77CCEA36,
0x9B97E731,
0xCDAF291C,
0x6B7EC875,
0xDFA13590,
0xC7522988,
0x02EEE414,
0x8FBAAF5C,
0x0455AF72,
0x3EF8F342,
0x4BB83656,
0x4F2F9131,
0xE386F4D3,
0x15D3F1A5,
0x27AAE313,
0x6523F806
]



def sub_7CD07F(box, s):
	
	res = []
	v15 = []
	for i in range(36):
		v15.append(0)
	v4 = int(s[5])
	v15[0] = int(s[3]) | ((int(s[2]) | ((int(s[1]) | (int(s[0]) << 8)) << 8)) << 8)
	v15[1] = int(s[7]) | ((int(s[6]) | ((v4 | (int(s[4]) << 8)) << 8)) << 8);
	v6 = int(s[9])
	v15[2] = int(s[11]) | ((int(s[10]) | ((v6 | (int(s[8]) << 8)) << 8)) << 8)
	v8 = int(s[13])
	v15[3] = int(s[15]) | ((int(s[14]) | ((v8 | (int(s[12]) << 8)) << 8)) << 8)
	for i in range(4):
		print(hex(v15[i]))

	for i in range(0x20):
		
		# assign 
		ecx = (v15[i+1] ^ v15[i+2] ^ v15[i+3] ^ box[i])
		idx_a = ecx >> 0x18
		#print(hex(ecx))
		val_a = byte_7EC3E8[idx_a]
		#print(hex(val_a))
		idx_b = (ecx >> 0x10) & 0x000000FF
		val_b = byte_7EC3E8[idx_b]
		val_ab = val_b | (val_a << 8)
		#print(hex(val_b))
		#print(hex(val_ab))
		idx_c = (ecx >> 0x8) & 0x000000FF
		val_c = byte_7EC3E8[idx_c]
		val_abc = val_c | (val_ab << 8)
		#print(hex(val_c))
		#print(hex(val_abc))
		idx_d = ecx & 0x000000FF
		val_d = byte_7EC3E8[idx_d]
		val_abcd = val_d | (val_abc << 8)
		#print(hex(val_d))
		#print('val_abcd: ', hex(val_abcd))
		
		# extent	
		temp_a = ((val_abcd << 18) & 0xFFFFFFFF) | (val_abcd >> 14) 
		temp_b = (val_abcd >> 22) | ((val_abcd << 10) & 0xFFFFFFFF) 
		temp_c = ((val_abcd << 24) & 0xFFFFFFFF) | (val_abcd >> 8) 
		temp_d = (val_abcd >> 30) | ((val_abcd << 2) & 0xFFFFFFFF) 
		#print(hex(temp_a))
		#print(hex(temp_b))
		#print(hex(temp_c))
		#print(hex(temp_d))
		#print(hex(v15[i]))
		v15[i+4] = val_abcd ^ v15[i] ^ temp_a ^ temp_b ^ temp_c ^ temp_d
		res.append(hex(v15[i+4]))
		print('v15[i+4]: ', hex(v15[i+4]))
		#break
	
	'''	
	res = res[::-1][:4]
	for x in res:
		print(x)
	'''

def sub_7CD025(box, s1, s2):
	v7 = ((0x20-1) >> 4)+ 1
	#for i in range(v7):
	#sub_7CD07F(box, s1)
	sub_7CD07F(box, s2)
	
	
	
def sub_7CD07F_decode(box, s):
	
	
	#rst_test = [0x3b0e071, 0x3a904877, 0x45ef484e, 0xb45d2d80]
	rst = [0x907CBE0E, 0x68F4E360, 0x8D2AA89A, 0xFCFFBE78]
	#rst = [0x553786E8, 0x9B5D05F5, 0x5FDC04DD, 0xE12A7721]
	rst_v15 = []
	for i in range(36):
		rst_v15.append(0)
	rst_v15[35] = rst[0]
	rst_v15[34] = rst[1]
	rst_v15[33] = rst[2]
	rst_v15[32] = rst[3]
	
	
	for i in range(0x20):
		
		ecx = (rst_v15[35-i-1] ^ rst_v15[35-i-2] ^ rst_v15[35-i-3] ^ box[35-i-4])
		idx_a = ecx >> 0x18
		#print(hex(ecx))
		val_a = byte_7EC3E8[idx_a]
		#print(hex(val_a))
		idx_b = (ecx >> 0x10) & 0x000000FF
		val_b = byte_7EC3E8[idx_b]
		val_ab = val_b | (val_a << 8)
		#print(hex(val_b))
		#print(hex(val_ab))
		idx_c = (ecx >> 0x8) & 0x000000FF
		val_c = byte_7EC3E8[idx_c]
		val_abc = val_c | (val_ab << 8)
		#print(hex(val_c))
		#print(hex(val_abc))
		idx_d = ecx & 0x000000FF
		val_d = byte_7EC3E8[idx_d]
		val_abcd = val_d | (val_abc << 8)	
		#print('val_abcd: ', hex(val_abcd))		
			
		temp_a = ((val_abcd << 18) & 0xFFFFFFFF) | (val_abcd >> 14) 
		temp_b = (val_abcd >> 22) | ((val_abcd << 10) & 0xFFFFFFFF) 
		temp_c = ((val_abcd << 24) & 0xFFFFFFFF) | (val_abcd >> 8) 
		temp_d = (val_abcd >> 30) | ((val_abcd << 2) & 0xFFFFFFFF) 
		#print(hex(temp_a))
		#print(hex(temp_b))
		#print(hex(temp_c))
		#print(hex(temp_d))
		#print(hex(v15[i]))
		rst_v15[35-i-4] = val_abcd ^ rst_v15[35-i] ^ temp_a ^ temp_b ^ temp_c ^ temp_d
		#print('rst_v15[35-i]: ', hex(rst_v15[35-i]))
		print('rst_v15[35-i-4]: ', hex(rst_v15[35-i-4]))
			
	
if __name__ == '__main__':
	
	s1 = [0x1A, 0x32, 0x54, 0x76, 0x21, 0x43, 0x65, 0x87, 0x21, 0x43, 0x65, 0x87, 0x21, 0x43, 0x65, 0x87]
	s2 = [0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27]
	sub_7CD025(box, s1, s2)
	sub_7CD07F_decode(box, s1)
